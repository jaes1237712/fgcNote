// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { AuthControllerGoogleLoginData, AuthControllerGoogleLoginResponses, AuthControllerGoogleLogoutData, AuthControllerGoogleLogoutResponses, UserControllerGetMeData, UserControllerGetMeResponses, CharacterControllerFindAllData, CharacterControllerFindAllResponses, CharacterControllerFindImagesData, CharacterControllerFindImagesResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Google login and Create session
 */
export const authControllerGoogleLogin = <ThrowOnError extends boolean = false>(options: Options<AuthControllerGoogleLoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AuthControllerGoogleLoginResponses, unknown, ThrowOnError>({
        url: '/auth/google-login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Logout and clear session
 */
export const authControllerGoogleLogout = <ThrowOnError extends boolean = false>(options?: Options<AuthControllerGoogleLogoutData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AuthControllerGoogleLogoutResponses, unknown, ThrowOnError>({
        url: '/auth/logout',
        ...options
    });
};

/**
 * Get user data from cookies
 */
export const userControllerGetMe = <ThrowOnError extends boolean = false>(options?: Options<UserControllerGetMeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserControllerGetMeResponses, unknown, ThrowOnError>({
        url: '/user/me',
        ...options
    });
};

/**
 * 獲取所有角色
 * 返回所有活躍的角色列表
 */
export const characterControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<CharacterControllerFindAllData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CharacterControllerFindAllResponses, unknown, ThrowOnError>({
        url: '/characters',
        ...options
    });
};

/**
 * 獲取角色圖片
 * 獲取特定角色的所有圖片
 */
export const characterControllerFindImages = <ThrowOnError extends boolean = false>(options: Options<CharacterControllerFindImagesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CharacterControllerFindImagesResponses, unknown, ThrowOnError>({
        url: '/characters/{id}/images',
        ...options
    });
};
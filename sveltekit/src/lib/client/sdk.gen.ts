// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type {
	AuthControllerGoogleLoginData,
	AuthControllerGoogleLoginResponses,
	AuthControllerLogoutData,
	AuthControllerLogoutResponses,
	UserControllerGetMeData,
	UserControllerGetMeResponses,
	CharacterControllerFindAllData,
	CharacterControllerFindAllResponses,
	CharacterControllerFindImagesData,
	CharacterControllerFindImagesResponses,
	CanvasControllerGetAllStageData,
	CanvasControllerGetAllStageResponses,
	CanvasControllerFindAllBlocksData,
	CanvasControllerFindAllBlocksResponses,
	CanvasControllerFindAllCharacterMoveImagesData,
	CanvasControllerFindAllCharacterMoveImagesResponses,
	CanvasControllerCreateNumpadBlockData,
	CanvasControllerCreateNumpadBlockResponses,
	CanvasControllerCreateNumpadBlockErrors,
	CanvasControllerCreateCharacterMoveImageData,
	CanvasControllerCreateCharacterMoveImageResponses,
	CanvasControllerCreateCharacterMoveImageErrors,
	CanvasControllerCreateStageData,
	CanvasControllerCreateStageResponses,
	CanvasControllerCreateStageErrors,
	CanvasControllerUpdateStageData,
	CanvasControllerUpdateStageResponses,
	CanvasControllerUpdateStageErrors,
	CanvasControllerUpdateNumpadBlockData,
	CanvasControllerUpdateNumpadBlockResponses,
	CanvasControllerUpdateNumpadBlockErrors,
	CanvasControllerUpdateCharacterMoveImageData,
	CanvasControllerUpdateCharacterMoveImageResponses,
	CanvasControllerUpdateCharacterMoveImageErrors,
	CanvasControllerDeleteStageData,
	CanvasControllerDeleteStageResponses,
	CanvasControllerDeleteStageErrors,
	CanvasControllerDeleteBlockData,
	CanvasControllerDeleteBlockResponses,
	CanvasControllerDeleteBlockErrors,
	CanvasControllerDeleteCharacterMoveImageData,
	CanvasControllerDeleteCharacterMoveImageResponses,
	CanvasControllerDeleteCharacterMoveImageErrors
} from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<
	TData extends TDataShape = TDataShape,
	ThrowOnError extends boolean = boolean
> = ClientOptions<TData, ThrowOnError> & {
	/**
	 * You can provide a client instance returned by `createClient()` instead of
	 * individual options. This might be also useful if you want to implement a
	 * custom client.
	 */
	client?: Client;
	/**
	 * You can pass arbitrary values through the `meta` object. This can be
	 * used to access values that aren't defined as part of the SDK function.
	 */
	meta?: Record<string, unknown>;
};

/**
 * Google login and Create session
 */
export const authControllerGoogleLogin = <ThrowOnError extends boolean = false>(
	options: Options<AuthControllerGoogleLoginData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<
		AuthControllerGoogleLoginResponses,
		unknown,
		ThrowOnError
	>({
		url: '/auth/google-login',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Logout and clear session
 */
export const authControllerLogout = <ThrowOnError extends boolean = false>(
	options?: Options<AuthControllerLogoutData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).post<
		AuthControllerLogoutResponses,
		unknown,
		ThrowOnError
	>({
		url: '/auth/logout',
		...options
	});
};

/**
 * Get user data from cookies
 */
export const userControllerGetMe = <ThrowOnError extends boolean = false>(
	options?: Options<UserControllerGetMeData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).get<
		UserControllerGetMeResponses,
		unknown,
		ThrowOnError
	>({
		url: '/user/me',
		...options
	});
};

/**
 * Return all characters
 */
export const characterControllerFindAll = <ThrowOnError extends boolean = false>(
	options?: Options<CharacterControllerFindAllData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).get<
		CharacterControllerFindAllResponses,
		unknown,
		ThrowOnError
	>({
		url: '/characters',
		...options
	});
};

/**
 * Get all the images of certain character
 */
export const characterControllerFindImages = <ThrowOnError extends boolean = false>(
	options: Options<CharacterControllerFindImagesData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).get<
		CharacterControllerFindImagesResponses,
		unknown,
		ThrowOnError
	>({
		url: '/characters/{id}/images',
		...options
	});
};

/**
 * Get all stage of certain user
 */
export const canvasControllerGetAllStage = <ThrowOnError extends boolean = false>(
	options?: Options<CanvasControllerGetAllStageData, ThrowOnError>
) => {
	return (options?.client ?? _heyApiClient).get<
		CanvasControllerGetAllStageResponses,
		unknown,
		ThrowOnError
	>({
		url: '/canvas/stage',
		...options
	});
};

/**
 * Get all blocks of certain stage
 */
export const canvasControllerFindAllBlocks = <ThrowOnError extends boolean = false>(
	options: Options<CanvasControllerFindAllBlocksData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).get<
		CanvasControllerFindAllBlocksResponses,
		unknown,
		ThrowOnError
	>({
		url: '/canvas/numpadBlock/get/{stageId}',
		...options
	});
};

/**
 * Get all characterMoveImage of certain stage
 */
export const canvasControllerFindAllCharacterMoveImages = <ThrowOnError extends boolean = false>(
	options: Options<CanvasControllerFindAllCharacterMoveImagesData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).get<
		CanvasControllerFindAllCharacterMoveImagesResponses,
		unknown,
		ThrowOnError
	>({
		url: '/canvas/characterMoveImage/get/{stageId}',
		...options
	});
};

/**
 * Create Numpad Block
 */
export const canvasControllerCreateNumpadBlock = <ThrowOnError extends boolean = false>(
	options: Options<CanvasControllerCreateNumpadBlockData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<
		CanvasControllerCreateNumpadBlockResponses,
		CanvasControllerCreateNumpadBlockErrors,
		ThrowOnError
	>({
		url: '/canvas/numpadBlock/create',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Create characterMoveImage
 */
export const canvasControllerCreateCharacterMoveImage = <ThrowOnError extends boolean = false>(
	options: Options<CanvasControllerCreateCharacterMoveImageData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<
		CanvasControllerCreateCharacterMoveImageResponses,
		CanvasControllerCreateCharacterMoveImageErrors,
		ThrowOnError
	>({
		url: '/canvas/characterMoveImage/create',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Create Stage
 */
export const canvasControllerCreateStage = <ThrowOnError extends boolean = false>(
	options: Options<CanvasControllerCreateStageData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).post<
		CanvasControllerCreateStageResponses,
		CanvasControllerCreateStageErrors,
		ThrowOnError
	>({
		url: '/canvas/stage/create',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Update Stage
 */
export const canvasControllerUpdateStage = <ThrowOnError extends boolean = false>(
	options: Options<CanvasControllerUpdateStageData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).patch<
		CanvasControllerUpdateStageResponses,
		CanvasControllerUpdateStageErrors,
		ThrowOnError
	>({
		url: '/canvas/stage/update',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Update numpadBlock
 */
export const canvasControllerUpdateNumpadBlock = <ThrowOnError extends boolean = false>(
	options: Options<CanvasControllerUpdateNumpadBlockData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).patch<
		CanvasControllerUpdateNumpadBlockResponses,
		CanvasControllerUpdateNumpadBlockErrors,
		ThrowOnError
	>({
		url: '/canvas/numpadBlock/update',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Update characterMoveImage
 */
export const canvasControllerUpdateCharacterMoveImage = <ThrowOnError extends boolean = false>(
	options: Options<CanvasControllerUpdateCharacterMoveImageData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).patch<
		CanvasControllerUpdateCharacterMoveImageResponses,
		CanvasControllerUpdateCharacterMoveImageErrors,
		ThrowOnError
	>({
		url: '/canvas/characterMoveImage/update',
		...options,
		headers: {
			'Content-Type': 'application/json',
			...options.headers
		}
	});
};

/**
 * Delete Certain stage
 */
export const canvasControllerDeleteStage = <ThrowOnError extends boolean = false>(
	options: Options<CanvasControllerDeleteStageData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).delete<
		CanvasControllerDeleteStageResponses,
		CanvasControllerDeleteStageErrors,
		ThrowOnError
	>({
		url: '/canvas/stage/delete/{stageId}',
		...options
	});
};

/**
 * Delete Certain block
 */
export const canvasControllerDeleteBlock = <ThrowOnError extends boolean = false>(
	options: Options<CanvasControllerDeleteBlockData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).delete<
		CanvasControllerDeleteBlockResponses,
		CanvasControllerDeleteBlockErrors,
		ThrowOnError
	>({
		url: '/canvas/numpadBlock/delete/{blockId}',
		...options
	});
};

/**
 * Delete Certain CanvasCharacterMoveImage
 */
export const canvasControllerDeleteCharacterMoveImage = <ThrowOnError extends boolean = false>(
	options: Options<CanvasControllerDeleteCharacterMoveImageData, ThrowOnError>
) => {
	return (options.client ?? _heyApiClient).delete<
		CanvasControllerDeleteCharacterMoveImageResponses,
		CanvasControllerDeleteCharacterMoveImageErrors,
		ThrowOnError
	>({
		url: '/canvas/characterMoveImage/delete/{blockId}',
		...options
	});
};

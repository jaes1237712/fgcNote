// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { AuthControllerGoogleLoginData, AuthControllerGoogleLoginResponses, AuthControllerLogoutData, AuthControllerLogoutResponses, UserControllerGetMeData, UserControllerGetMeResponses, CharacterControllerFindAllData, CharacterControllerFindAllResponses, CharacterControllerFindImagesData, CharacterControllerFindImagesResponses, CanvasControllerGetAllStageData, CanvasControllerGetAllStageResponses, CanvasControllerFindAllBlocksData, CanvasControllerFindAllBlocksResponses, CanvasControllerFindAllCharacterMoveImagesData, CanvasControllerFindAllCharacterMoveImagesResponses, CanvasControllerFindAllArrowsData, CanvasControllerFindAllArrowsResponses, CanvasControllerFindAllTextsData, CanvasControllerFindAllTextsResponses, CanvasControllerFindAllVideosData, CanvasControllerFindAllVideosResponses, CanvasControllerFindAllArrowAnchorsData, CanvasControllerFindAllArrowAnchorsResponses, CanvasControllerCreateNumpadBlockData, CanvasControllerCreateNumpadBlockResponses, CanvasControllerCreateNumpadBlockErrors, CanvasControllerCreateNumpadBlocksData, CanvasControllerCreateNumpadBlocksResponses, CanvasControllerCreateNumpadBlocksErrors, CanvasControllerCreateCharacterMoveImageData, CanvasControllerCreateCharacterMoveImageResponses, CanvasControllerCreateCharacterMoveImageErrors, CanvasControllerCreateCharacterMoveImagesData, CanvasControllerCreateCharacterMoveImagesResponses, CanvasControllerCreateCharacterMoveImagesErrors, CanvasControllerCreateArrowData, CanvasControllerCreateArrowResponses, CanvasControllerCreateArrowErrors, CanvasControllerCreateArrowsData, CanvasControllerCreateArrowsResponses, CanvasControllerCreateArrowsErrors, CanvasControllerCreateTextData, CanvasControllerCreateTextResponses, CanvasControllerCreateTextErrors, CanvasControllerCreateTextsData, CanvasControllerCreateTextsResponses, CanvasControllerCreateTextsErrors, CanvasControllerCreateVideoData, CanvasControllerCreateVideoResponses, CanvasControllerCreateVideoErrors, CanvasControllerCreateVideosData, CanvasControllerCreateVideosResponses, CanvasControllerCreateVideosErrors, CanvasControllerCreateArrowAnchorData, CanvasControllerCreateArrowAnchorResponses, CanvasControllerCreateArrowAnchorErrors, CanvasControllerCreateArrowAnchorsData, CanvasControllerCreateArrowAnchorsResponses, CanvasControllerCreateArrowAnchorsErrors, CanvasControllerCreateStageData, CanvasControllerCreateStageResponses, CanvasControllerCreateStageErrors, CanvasControllerUpdateStageData, CanvasControllerUpdateStageResponses, CanvasControllerUpdateStageErrors, CanvasControllerUpdateNumpadBlockData, CanvasControllerUpdateNumpadBlockResponses, CanvasControllerUpdateNumpadBlockErrors, CanvasControllerUpdateCharacterMoveImageData, CanvasControllerUpdateCharacterMoveImageResponses, CanvasControllerUpdateCharacterMoveImageErrors, CanvasControllerUpdateArrowData, CanvasControllerUpdateArrowResponses, CanvasControllerUpdateArrowErrors, CanvasControllerUpdateTextData, CanvasControllerUpdateTextResponses, CanvasControllerUpdateTextErrors, CanvasControllerUpdateVideoData, CanvasControllerUpdateVideoResponses, CanvasControllerUpdateVideoErrors, CanvasControllerUpdateArrowAnchorData, CanvasControllerUpdateArrowAnchorResponses, CanvasControllerUpdateArrowAnchorErrors, CanvasControllerDeleteStageData, CanvasControllerDeleteStageResponses, CanvasControllerDeleteStageErrors, CanvasControllerDeleteNumpadBlockData, CanvasControllerDeleteNumpadBlockResponses, CanvasControllerDeleteNumpadBlockErrors, CanvasControllerDeleteNumpadBlocksByStageIdData, CanvasControllerDeleteNumpadBlocksByStageIdResponses, CanvasControllerDeleteNumpadBlocksByStageIdErrors, CanvasControllerDeleteCharacterMoveImageData, CanvasControllerDeleteCharacterMoveImageResponses, CanvasControllerDeleteCharacterMoveImageErrors, CanvasControllerDeleteCharacterMoveImagesByStageIdData, CanvasControllerDeleteCharacterMoveImagesByStageIdResponses, CanvasControllerDeleteCharacterMoveImagesByStageIdErrors, CanvasControllerDeleteArrowData, CanvasControllerDeleteArrowResponses, CanvasControllerDeleteArrowErrors, CanvasControllerDeleteArrowByStageIdData, CanvasControllerDeleteArrowByStageIdResponses, CanvasControllerDeleteArrowByStageIdErrors, CanvasControllerDeleteTextData, CanvasControllerDeleteTextResponses, CanvasControllerDeleteTextErrors, CanvasControllerDeleteTextsByStageIdData, CanvasControllerDeleteTextsByStageIdResponses, CanvasControllerDeleteTextsByStageIdErrors, CanvasControllerDeleteVideoData, CanvasControllerDeleteVideoResponses, CanvasControllerDeleteVideoErrors, CanvasControllerDeleteVideosByStageIdData, CanvasControllerDeleteVideosByStageIdResponses, CanvasControllerDeleteVideosByStageIdErrors, CanvasControllerDeleteArrowAnchorData, CanvasControllerDeleteArrowAnchorResponses, CanvasControllerDeleteArrowAnchorErrors, CanvasControllerDeleteArrowAnchorsByStageIdData, CanvasControllerDeleteArrowAnchorsByStageIdResponses, CanvasControllerDeleteArrowAnchorsByStageIdErrors, CanvasControllerSyncNumpadBlocksData, CanvasControllerSyncNumpadBlocksResponses, CanvasControllerSyncNumpadBlocksErrors, CanvasControllerSyncCharacterMoveImagesData, CanvasControllerSyncCharacterMoveImagesResponses, CanvasControllerSyncCharacterMoveImagesErrors, CanvasControllerSyncArrowsData, CanvasControllerSyncArrowsResponses, CanvasControllerSyncArrowsErrors, CanvasControllerSyncTextsData, CanvasControllerSyncTextsResponses, CanvasControllerSyncTextsErrors, CanvasControllerSyncVideosData, CanvasControllerSyncVideosResponses, CanvasControllerSyncVideosErrors, CanvasControllerSyncArrowAnchorsData, CanvasControllerSyncArrowAnchorsResponses, CanvasControllerSyncArrowAnchorsErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Google login and Create session
 */
export const authControllerGoogleLogin = <ThrowOnError extends boolean = false>(options: Options<AuthControllerGoogleLoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AuthControllerGoogleLoginResponses, unknown, ThrowOnError>({
        url: '/auth/google-login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Logout and clear session
 */
export const authControllerLogout = <ThrowOnError extends boolean = false>(options?: Options<AuthControllerLogoutData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AuthControllerLogoutResponses, unknown, ThrowOnError>({
        url: '/auth/logout',
        ...options
    });
};

/**
 * Get user data from cookies
 */
export const userControllerGetMe = <ThrowOnError extends boolean = false>(options?: Options<UserControllerGetMeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserControllerGetMeResponses, unknown, ThrowOnError>({
        url: '/user/me',
        ...options
    });
};

/**
 * Return all characters
 */
export const characterControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<CharacterControllerFindAllData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CharacterControllerFindAllResponses, unknown, ThrowOnError>({
        url: '/characters',
        ...options
    });
};

/**
 * Get all the images of certain character
 */
export const characterControllerFindImages = <ThrowOnError extends boolean = false>(options: Options<CharacterControllerFindImagesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CharacterControllerFindImagesResponses, unknown, ThrowOnError>({
        url: '/characters/{id}/images',
        ...options
    });
};

/**
 * Get all stage of certain user
 */
export const canvasControllerGetAllStage = <ThrowOnError extends boolean = false>(options?: Options<CanvasControllerGetAllStageData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CanvasControllerGetAllStageResponses, unknown, ThrowOnError>({
        url: '/canvas/stage',
        ...options
    });
};

/**
 * Get all blocks of certain stage
 */
export const canvasControllerFindAllBlocks = <ThrowOnError extends boolean = false>(options: Options<CanvasControllerFindAllBlocksData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CanvasControllerFindAllBlocksResponses, unknown, ThrowOnError>({
        url: '/canvas/numpadBlock/get/{stageId}',
        ...options
    });
};

/**
 * Get all characterMoveImage of certain stage
 */
export const canvasControllerFindAllCharacterMoveImages = <ThrowOnError extends boolean = false>(options: Options<CanvasControllerFindAllCharacterMoveImagesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CanvasControllerFindAllCharacterMoveImagesResponses, unknown, ThrowOnError>({
        url: '/canvas/characterMoveImage/get/{stageId}',
        ...options
    });
};

/**
 * Get all arrows of certain stage
 */
export const canvasControllerFindAllArrows = <ThrowOnError extends boolean = false>(options: Options<CanvasControllerFindAllArrowsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CanvasControllerFindAllArrowsResponses, unknown, ThrowOnError>({
        url: '/canvas/arrow/get/{stageId}',
        ...options
    });
};

/**
 * Get all texts of certain stage
 */
export const canvasControllerFindAllTexts = <ThrowOnError extends boolean = false>(options: Options<CanvasControllerFindAllTextsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CanvasControllerFindAllTextsResponses, unknown, ThrowOnError>({
        url: '/canvas/text/get/{stageId}',
        ...options
    });
};

/**
 * Get all videos of certain stage
 */
export const canvasControllerFindAllVideos = <ThrowOnError extends boolean = false>(options: Options<CanvasControllerFindAllVideosData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CanvasControllerFindAllVideosResponses, unknown, ThrowOnError>({
        url: '/canvas/video/get/{stageId}',
        ...options
    });
};

/**
 * Get all arrow anchors of certain stage
 */
export const canvasControllerFindAllArrowAnchors = <ThrowOnError extends boolean = false>(options: Options<CanvasControllerFindAllArrowAnchorsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CanvasControllerFindAllArrowAnchorsResponses, unknown, ThrowOnError>({
        url: '/canvas/arrowAnchor/get/{stageId}',
        ...options
    });
};

/**
 * Create Numpad Block
 */
export const canvasControllerCreateNumpadBlock = <ThrowOnError extends boolean = false>(options: Options<CanvasControllerCreateNumpadBlockData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CanvasControllerCreateNumpadBlockResponses, CanvasControllerCreateNumpadBlockErrors, ThrowOnError>({
        url: '/canvas/numpadBlock/create',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create multiple Numpad Blocks
 * Creates multiple Numpad Blocks in a single request.
 */
export const canvasControllerCreateNumpadBlocks = <ThrowOnError extends boolean = false>(options: Options<CanvasControllerCreateNumpadBlocksData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CanvasControllerCreateNumpadBlocksResponses, CanvasControllerCreateNumpadBlocksErrors, ThrowOnError>({
        url: '/canvas/numpadBlocks/bulk-create',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create characterMoveImage
 */
export const canvasControllerCreateCharacterMoveImage = <ThrowOnError extends boolean = false>(options: Options<CanvasControllerCreateCharacterMoveImageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CanvasControllerCreateCharacterMoveImageResponses, CanvasControllerCreateCharacterMoveImageErrors, ThrowOnError>({
        url: '/canvas/characterMoveImage/create',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create multiple characterMoveImages
 * Creates multiple characterMoveImages in a single request.
 */
export const canvasControllerCreateCharacterMoveImages = <ThrowOnError extends boolean = false>(options: Options<CanvasControllerCreateCharacterMoveImagesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CanvasControllerCreateCharacterMoveImagesResponses, CanvasControllerCreateCharacterMoveImagesErrors, ThrowOnError>({
        url: '/canvas/characterMoveImage/bulk-create',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create arrow
 */
export const canvasControllerCreateArrow = <ThrowOnError extends boolean = false>(options: Options<CanvasControllerCreateArrowData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CanvasControllerCreateArrowResponses, CanvasControllerCreateArrowErrors, ThrowOnError>({
        url: '/canvas/arrow/create',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create multiple arrows
 * Creates multiple arrows in a single request.
 */
export const canvasControllerCreateArrows = <ThrowOnError extends boolean = false>(options: Options<CanvasControllerCreateArrowsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CanvasControllerCreateArrowsResponses, CanvasControllerCreateArrowsErrors, ThrowOnError>({
        url: '/canvas/arrow/bulk-create',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create text
 */
export const canvasControllerCreateText = <ThrowOnError extends boolean = false>(options: Options<CanvasControllerCreateTextData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CanvasControllerCreateTextResponses, CanvasControllerCreateTextErrors, ThrowOnError>({
        url: '/canvas/text/create',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create multiple texts
 * Creates multiple texts in a single request.
 */
export const canvasControllerCreateTexts = <ThrowOnError extends boolean = false>(options: Options<CanvasControllerCreateTextsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CanvasControllerCreateTextsResponses, CanvasControllerCreateTextsErrors, ThrowOnError>({
        url: '/canvas/text/bulk-create',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create video
 */
export const canvasControllerCreateVideo = <ThrowOnError extends boolean = false>(options: Options<CanvasControllerCreateVideoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CanvasControllerCreateVideoResponses, CanvasControllerCreateVideoErrors, ThrowOnError>({
        url: '/canvas/video/create',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create multiple videos
 * Creates multiple videos in a single request.
 */
export const canvasControllerCreateVideos = <ThrowOnError extends boolean = false>(options: Options<CanvasControllerCreateVideosData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CanvasControllerCreateVideosResponses, CanvasControllerCreateVideosErrors, ThrowOnError>({
        url: '/canvas/video/bulk-create',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create arrow anchor
 */
export const canvasControllerCreateArrowAnchor = <ThrowOnError extends boolean = false>(options: Options<CanvasControllerCreateArrowAnchorData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CanvasControllerCreateArrowAnchorResponses, CanvasControllerCreateArrowAnchorErrors, ThrowOnError>({
        url: '/canvas/arrowAnchor/create',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create multiple arrow anchors
 * Creates multiple arrow anchors in a single request.
 */
export const canvasControllerCreateArrowAnchors = <ThrowOnError extends boolean = false>(options: Options<CanvasControllerCreateArrowAnchorsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CanvasControllerCreateArrowAnchorsResponses, CanvasControllerCreateArrowAnchorsErrors, ThrowOnError>({
        url: '/canvas/arrowAnchor/bulk-create',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create Stage
 */
export const canvasControllerCreateStage = <ThrowOnError extends boolean = false>(options: Options<CanvasControllerCreateStageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CanvasControllerCreateStageResponses, CanvasControllerCreateStageErrors, ThrowOnError>({
        url: '/canvas/stage/create',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update Stage
 */
export const canvasControllerUpdateStage = <ThrowOnError extends boolean = false>(options: Options<CanvasControllerUpdateStageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<CanvasControllerUpdateStageResponses, CanvasControllerUpdateStageErrors, ThrowOnError>({
        url: '/canvas/stage/update',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update numpadBlock
 */
export const canvasControllerUpdateNumpadBlock = <ThrowOnError extends boolean = false>(options: Options<CanvasControllerUpdateNumpadBlockData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<CanvasControllerUpdateNumpadBlockResponses, CanvasControllerUpdateNumpadBlockErrors, ThrowOnError>({
        url: '/canvas/numpadBlock/update',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update characterMoveImage
 */
export const canvasControllerUpdateCharacterMoveImage = <ThrowOnError extends boolean = false>(options: Options<CanvasControllerUpdateCharacterMoveImageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<CanvasControllerUpdateCharacterMoveImageResponses, CanvasControllerUpdateCharacterMoveImageErrors, ThrowOnError>({
        url: '/canvas/characterMoveImage/update',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update arrow
 */
export const canvasControllerUpdateArrow = <ThrowOnError extends boolean = false>(options: Options<CanvasControllerUpdateArrowData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<CanvasControllerUpdateArrowResponses, CanvasControllerUpdateArrowErrors, ThrowOnError>({
        url: '/canvas/arrow/update',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update text
 */
export const canvasControllerUpdateText = <ThrowOnError extends boolean = false>(options: Options<CanvasControllerUpdateTextData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<CanvasControllerUpdateTextResponses, CanvasControllerUpdateTextErrors, ThrowOnError>({
        url: '/canvas/text/update',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update video
 */
export const canvasControllerUpdateVideo = <ThrowOnError extends boolean = false>(options: Options<CanvasControllerUpdateVideoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<CanvasControllerUpdateVideoResponses, CanvasControllerUpdateVideoErrors, ThrowOnError>({
        url: '/canvas/video/update',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update arrow anchor
 */
export const canvasControllerUpdateArrowAnchor = <ThrowOnError extends boolean = false>(options: Options<CanvasControllerUpdateArrowAnchorData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<CanvasControllerUpdateArrowAnchorResponses, CanvasControllerUpdateArrowAnchorErrors, ThrowOnError>({
        url: '/canvas/arrowAnchor/update',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Certain stage
 */
export const canvasControllerDeleteStage = <ThrowOnError extends boolean = false>(options: Options<CanvasControllerDeleteStageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CanvasControllerDeleteStageResponses, CanvasControllerDeleteStageErrors, ThrowOnError>({
        url: '/canvas/stage/delete/{stageId}',
        ...options
    });
};

/**
 * Delete Certain block
 */
export const canvasControllerDeleteNumpadBlock = <ThrowOnError extends boolean = false>(options: Options<CanvasControllerDeleteNumpadBlockData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CanvasControllerDeleteNumpadBlockResponses, CanvasControllerDeleteNumpadBlockErrors, ThrowOnError>({
        url: '/canvas/numpadBlock/delete/{blockId}',
        ...options
    });
};

/**
 * Delete All NumpadBlocks belong to this stage
 */
export const canvasControllerDeleteNumpadBlocksByStageId = <ThrowOnError extends boolean = false>(options: Options<CanvasControllerDeleteNumpadBlocksByStageIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CanvasControllerDeleteNumpadBlocksByStageIdResponses, CanvasControllerDeleteNumpadBlocksByStageIdErrors, ThrowOnError>({
        url: '/canvas/numpadBlock/delete/{stageId}',
        ...options
    });
};

/**
 * Delete Certain CanvasCharacterMoveImage
 */
export const canvasControllerDeleteCharacterMoveImage = <ThrowOnError extends boolean = false>(options: Options<CanvasControllerDeleteCharacterMoveImageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CanvasControllerDeleteCharacterMoveImageResponses, CanvasControllerDeleteCharacterMoveImageErrors, ThrowOnError>({
        url: '/canvas/characterMoveImage/delete/{canvasCharacterMoveImageID}',
        ...options
    });
};

/**
 * Delete All CharacterMoveImages belong to this stage
 */
export const canvasControllerDeleteCharacterMoveImagesByStageId = <ThrowOnError extends boolean = false>(options: Options<CanvasControllerDeleteCharacterMoveImagesByStageIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CanvasControllerDeleteCharacterMoveImagesByStageIdResponses, CanvasControllerDeleteCharacterMoveImagesByStageIdErrors, ThrowOnError>({
        url: '/canvas/characterMoveImage/delete/{stageId}',
        ...options
    });
};

/**
 * Delete Certain arrow
 */
export const canvasControllerDeleteArrow = <ThrowOnError extends boolean = false>(options: Options<CanvasControllerDeleteArrowData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CanvasControllerDeleteArrowResponses, CanvasControllerDeleteArrowErrors, ThrowOnError>({
        url: '/canvas/arrow/delete/{arrowId}',
        ...options
    });
};

/**
 * Delete All arrow belong to this stage
 */
export const canvasControllerDeleteArrowByStageId = <ThrowOnError extends boolean = false>(options: Options<CanvasControllerDeleteArrowByStageIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CanvasControllerDeleteArrowByStageIdResponses, CanvasControllerDeleteArrowByStageIdErrors, ThrowOnError>({
        url: '/canvas/arrow/delete/{stageId}',
        ...options
    });
};

/**
 * Delete Certain text
 */
export const canvasControllerDeleteText = <ThrowOnError extends boolean = false>(options: Options<CanvasControllerDeleteTextData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CanvasControllerDeleteTextResponses, CanvasControllerDeleteTextErrors, ThrowOnError>({
        url: '/canvas/text/delete/{textId}',
        ...options
    });
};

/**
 * Delete All texts belong to this stage
 */
export const canvasControllerDeleteTextsByStageId = <ThrowOnError extends boolean = false>(options: Options<CanvasControllerDeleteTextsByStageIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CanvasControllerDeleteTextsByStageIdResponses, CanvasControllerDeleteTextsByStageIdErrors, ThrowOnError>({
        url: '/canvas/text/delete/{stageId}',
        ...options
    });
};

/**
 * Delete Certain video
 */
export const canvasControllerDeleteVideo = <ThrowOnError extends boolean = false>(options: Options<CanvasControllerDeleteVideoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CanvasControllerDeleteVideoResponses, CanvasControllerDeleteVideoErrors, ThrowOnError>({
        url: '/canvas/video/delete/{videoId}',
        ...options
    });
};

/**
 * Delete All videos belong to this stage
 */
export const canvasControllerDeleteVideosByStageId = <ThrowOnError extends boolean = false>(options: Options<CanvasControllerDeleteVideosByStageIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CanvasControllerDeleteVideosByStageIdResponses, CanvasControllerDeleteVideosByStageIdErrors, ThrowOnError>({
        url: '/canvas/video/delete/{stageId}',
        ...options
    });
};

/**
 * Delete Certain arrow anchor
 */
export const canvasControllerDeleteArrowAnchor = <ThrowOnError extends boolean = false>(options: Options<CanvasControllerDeleteArrowAnchorData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CanvasControllerDeleteArrowAnchorResponses, CanvasControllerDeleteArrowAnchorErrors, ThrowOnError>({
        url: '/canvas/arrowAnchor/delete/{arrowAnchorId}',
        ...options
    });
};

/**
 * Delete All arrow anchors belong to this stage
 */
export const canvasControllerDeleteArrowAnchorsByStageId = <ThrowOnError extends boolean = false>(options: Options<CanvasControllerDeleteArrowAnchorsByStageIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CanvasControllerDeleteArrowAnchorsByStageIdResponses, CanvasControllerDeleteArrowAnchorsByStageIdErrors, ThrowOnError>({
        url: '/canvas/arrowAnchor/delete/{stageId}',
        ...options
    });
};

export const canvasControllerSyncNumpadBlocks = <ThrowOnError extends boolean = false>(options: Options<CanvasControllerSyncNumpadBlocksData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<CanvasControllerSyncNumpadBlocksResponses, CanvasControllerSyncNumpadBlocksErrors, ThrowOnError>({
        url: '/canvas/numpadBlock/sync',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const canvasControllerSyncCharacterMoveImages = <ThrowOnError extends boolean = false>(options: Options<CanvasControllerSyncCharacterMoveImagesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<CanvasControllerSyncCharacterMoveImagesResponses, CanvasControllerSyncCharacterMoveImagesErrors, ThrowOnError>({
        url: '/canvas/characterMoveImage/sync',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const canvasControllerSyncArrows = <ThrowOnError extends boolean = false>(options: Options<CanvasControllerSyncArrowsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<CanvasControllerSyncArrowsResponses, CanvasControllerSyncArrowsErrors, ThrowOnError>({
        url: '/canvas/arrow/sync',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const canvasControllerSyncTexts = <ThrowOnError extends boolean = false>(options: Options<CanvasControllerSyncTextsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<CanvasControllerSyncTextsResponses, CanvasControllerSyncTextsErrors, ThrowOnError>({
        url: '/canvas/text/sync',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const canvasControllerSyncVideos = <ThrowOnError extends boolean = false>(options: Options<CanvasControllerSyncVideosData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<CanvasControllerSyncVideosResponses, CanvasControllerSyncVideosErrors, ThrowOnError>({
        url: '/canvas/video/sync',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const canvasControllerSyncArrowAnchors = <ThrowOnError extends boolean = false>(options: Options<CanvasControllerSyncArrowAnchorsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<CanvasControllerSyncArrowAnchorsResponses, CanvasControllerSyncArrowAnchorsErrors, ThrowOnError>({
        url: '/canvas/arrowAnchor/sync',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};
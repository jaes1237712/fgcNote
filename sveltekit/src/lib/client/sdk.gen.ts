// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { AuthControllerGoogleLoginData, AuthControllerGoogleLoginResponses, AuthControllerLogoutData, AuthControllerLogoutResponses, UserControllerGetMeData, UserControllerGetMeResponses, CharacterControllerFindAllData, CharacterControllerFindAllResponses, CharacterControllerFindImagesData, CharacterControllerFindImagesResponses, CanvasControllerGetAllStageData, CanvasControllerGetAllStageResponses, CanvasControllerFindAllBlocksData, CanvasControllerFindAllBlocksResponses, CanvasControllerCreateNumpadBlockData, CanvasControllerCreateNumpadBlockResponses, CanvasControllerCreateNumpadBlockErrors, CanvasControllerCreateStageData, CanvasControllerCreateStageResponses, CanvasControllerCreateStageErrors, CanvasControllerUpdateStageData, CanvasControllerUpdateStageResponses, CanvasControllerUpdateStageErrors, CanvasControllerDeleteStageData, CanvasControllerDeleteStageResponses, CanvasControllerDeleteStageErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Google login and Create session
 */
export const authControllerGoogleLogin = <ThrowOnError extends boolean = false>(options: Options<AuthControllerGoogleLoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AuthControllerGoogleLoginResponses, unknown, ThrowOnError>({
        url: '/auth/google-login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Logout and clear session
 */
export const authControllerLogout = <ThrowOnError extends boolean = false>(options?: Options<AuthControllerLogoutData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AuthControllerLogoutResponses, unknown, ThrowOnError>({
        url: '/auth/logout',
        ...options
    });
};

/**
 * Get user data from cookies
 */
export const userControllerGetMe = <ThrowOnError extends boolean = false>(options?: Options<UserControllerGetMeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserControllerGetMeResponses, unknown, ThrowOnError>({
        url: '/user/me',
        ...options
    });
};

/**
 * Return all characters
 */
export const characterControllerFindAll = <ThrowOnError extends boolean = false>(options?: Options<CharacterControllerFindAllData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CharacterControllerFindAllResponses, unknown, ThrowOnError>({
        url: '/characters',
        ...options
    });
};

/**
 * Get all the images of certain character
 */
export const characterControllerFindImages = <ThrowOnError extends boolean = false>(options: Options<CharacterControllerFindImagesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CharacterControllerFindImagesResponses, unknown, ThrowOnError>({
        url: '/characters/{id}/images',
        ...options
    });
};

/**
 * Get all stage of certain user
 */
export const canvasControllerGetAllStage = <ThrowOnError extends boolean = false>(options?: Options<CanvasControllerGetAllStageData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CanvasControllerGetAllStageResponses, unknown, ThrowOnError>({
        url: '/canvas/stage',
        ...options
    });
};

/**
 * Get all blocks of certain stage
 */
export const canvasControllerFindAllBlocks = <ThrowOnError extends boolean = false>(options: Options<CanvasControllerFindAllBlocksData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CanvasControllerFindAllBlocksResponses, unknown, ThrowOnError>({
        url: '/canvas/{stageId}/numpadBlocks',
        ...options
    });
};

/**
 * Create Numpad Block
 */
export const canvasControllerCreateNumpadBlock = <ThrowOnError extends boolean = false>(options: Options<CanvasControllerCreateNumpadBlockData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CanvasControllerCreateNumpadBlockResponses, CanvasControllerCreateNumpadBlockErrors, ThrowOnError>({
        url: '/canvas/numpadBlock/create',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create Stage
 */
export const canvasControllerCreateStage = <ThrowOnError extends boolean = false>(options: Options<CanvasControllerCreateStageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CanvasControllerCreateStageResponses, CanvasControllerCreateStageErrors, ThrowOnError>({
        url: '/canvas/stage/create',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update Stage
 */
export const canvasControllerUpdateStage = <ThrowOnError extends boolean = false>(options: Options<CanvasControllerUpdateStageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CanvasControllerUpdateStageResponses, CanvasControllerUpdateStageErrors, ThrowOnError>({
        url: '/canvas/stage/update',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Certain stage
 */
export const canvasControllerDeleteStage = <ThrowOnError extends boolean = false>(options: Options<CanvasControllerDeleteStageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CanvasControllerDeleteStageResponses, CanvasControllerDeleteStageErrors, ThrowOnError>({
        url: '/canvas/stage/{stageId}',
        ...options
    });
};
// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { UserGetMeData, UserGetMeResponses, UserIsYouThereData, UserIsYouThereResponses, UserIsYouThereErrors, AuthGoogleLoginData, AuthGoogleLoginResponses, AuthGoogleLoginErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get Me
 */
export const userGetMe = <ThrowOnError extends boolean = false>(options?: Options<UserGetMeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserGetMeResponses, unknown, ThrowOnError>({
        url: '/user/me',
        ...options
    });
};

/**
 * Is You There
 */
export const userIsYouThere = <ThrowOnError extends boolean = false>(options: Options<UserIsYouThereData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserIsYouThereResponses, UserIsYouThereErrors, ThrowOnError>({
        url: '/user/search/{email}',
        ...options
    });
};

/**
 * Google Login
 */
export const authGoogleLogin = <ThrowOnError extends boolean = false>(options: Options<AuthGoogleLoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AuthGoogleLoginResponses, AuthGoogleLoginErrors, ThrowOnError>({
        url: '/auth/google-login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};
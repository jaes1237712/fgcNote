// This file is auto-generated by @hey-api/openapi-ts

export type GoogleLoginBody = {
    id_token: string;
};

export type UserDto = {
    /**
     * User ID
     */
    id: string;
    /**
     * User Email
     */
    email: string;
    /**
     * User Nickname(Default Google Name)
     */
    nickname: string;
    /**
     * User Google Picture
     */
    picture: string | null;
};

export type CharacterDto = {
    /**
     * Primary ID
     */
    id: number;
    /**
     * Character Name
     */
    name: string;
    /**
     * Icon Path
     */
    iconFilePath: string;
    /**
     * Portrait Path
     */
    portraitFilePath: string;
};

export type CharacterMoveImageDto = {
    /**
     * File name of the image
     */
    fileName: string;
    /**
     * File path of the image
     */
    filePath: string;
    /**
     * ID of the associated character
     */
    characterId: number;
    /**
     * Width of the image in pixels
     */
    width: number;
    /**
     * Height of the image in pixels
     */
    height: number;
};

export type CanvasStageDto = {
    /**
     * UUIDv4, generate by client
     */
    id: string;
    /**
     * UUIDv4, generate by client
     */
    characterMe: CharacterDto;
    /**
     * UUIDv4, generate by client
     */
    characterOpponent: CharacterDto;
    /**
     * Stage Name
     */
    name: string;
    /**
     * who create this stage
     */
    user: UserDto;
};

export type CanvasNumpadBlockDto = {
    /**
     * UUIDv4, generate by client
     */
    id: string;
    /**
     * Numpad Input, like 623p
     */
    input: string;
    /**
     * CONTROLLER_TYPE, modern or classic
     */
    type: 'CLASSIC' | 'MODERN';
    /**
     * x, unit: viewportWidthUnit
     */
    x: number;
    /**
     * y, unit: viewportHeightUnit
     */
    y: number;
};

export type CanvasCharacterMoveImageDto = {
    /**
     * UUIDv4, generate by client
     */
    id: string;
    /**
     * x, unit: viewportWidthUnit
     */
    x: number;
    /**
     * y, unit: viewportHeightUnit
     */
    y: number;
    characterMoveImage: CharacterMoveImageDto;
};

export type CanvasArrowDto = {
    /**
     * UUIDv4, generate by client
     */
    id: string;
    /**
     *  other canvas entity primary ID
     */
    startNodeId: string;
    /**
     * other canvas entity primary ID
     */
    endNodeId: string | null;
    /**
     * Konva arrow attrs points
     */
    points: Array<number>;
};

export type CreateCanvasNumpadBlockDto = {
    /**
     * UUIDv4, generate by client
     */
    id: string;
    /**
     * Numpad Input, like 623p
     */
    input: string;
    /**
     * CONTROLLER_TYPE, modern or classic
     */
    type: 'CLASSIC' | 'MODERN';
    /**
     * x, unit: viewportWidthUnit
     */
    x: number;
    /**
     * y, unit: viewportHeightUnit
     */
    y: number;
    /**
     * belong to which stage
     */
    stageId: string;
};

export type CreateCanvasCharacterMoveImageDto = {
    /**
     * UUIDv4, generate by client
     */
    id: string;
    /**
     * x, unit: viewportWidthUnit
     */
    x: number;
    /**
     * y, unit: viewportHeightUnit
     */
    y: number;
    characterMoveImage: CharacterMoveImageDto;
    /**
     * belong to which stage
     */
    stageId: string;
};

export type CreateCanvasArrowDto = {
    /**
     * UUIDv4, generate by client
     */
    id: string;
    /**
     *  other canvas entity primary ID
     */
    startNodeId: string;
    /**
     * other canvas entity primary ID
     */
    endNodeId: string | null;
    /**
     * Konva arrow attrs points
     */
    points: Array<number>;
    /**
     * belong to which stage
     */
    stageId: string;
};

export type CreateCanvasStageDto = {
    id: string;
    characterMe: CharacterDto;
    characterOpponent: CharacterDto;
    name: string;
};

export type UpdateCanvasStageDto = {
    id: string;
    /**
     * The updated name of the stage
     */
    name: string;
};

export type UpdateCanvasNumpadBlockDto = {
    /**
     * UUIDv4, generate by client
     */
    id: string;
    /**
     * Numpad Input, like 623p
     */
    input: string;
    /**
     * CONTROLLER_TYPE, modern or classic
     */
    type: 'CLASSIC' | 'MODERN';
    /**
     * x, unit: viewportWidthUnit
     */
    x: number;
    /**
     * y, unit: viewportHeightUnit
     */
    y: number;
};

export type UpdateCanvasCharacterMoveImageDto = {
    /**
     * UUIDv4, generate by client
     */
    id: string;
    /**
     * x, unit: viewportWidthUnit
     */
    x: number;
    /**
     * y, unit: viewportHeightUnit
     */
    y: number;
    characterMoveImage: CharacterMoveImageDto;
};

export type UpdateCanvasArrowDto = {
    /**
     * UUIDv4, generate by client
     */
    id: string;
    /**
     *  other canvas entity primary ID
     */
    startNodeId: string;
    /**
     * other canvas entity primary ID
     */
    endNodeId: string | null;
    /**
     * Konva arrow attrs points
     */
    points: Array<number>;
    /**
     * belong to which stage
     */
    stageId: string;
};

export type AuthControllerGoogleLoginData = {
    body: GoogleLoginBody;
    path?: never;
    query?: never;
    url: '/auth/google-login';
};

export type AuthControllerGoogleLoginResponses = {
    /**
     * Login and Create Session successfully
     */
    200: UserDto;
};

export type AuthControllerGoogleLoginResponse = AuthControllerGoogleLoginResponses[keyof AuthControllerGoogleLoginResponses];

export type AuthControllerLogoutData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/logout';
};

export type AuthControllerLogoutResponses = {
    /**
     * Logout successfully
     */
    200: unknown;
};

export type UserControllerGetMeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/user/me';
};

export type UserControllerGetMeResponses = {
    200: UserDto;
};

export type UserControllerGetMeResponse = UserControllerGetMeResponses[keyof UserControllerGetMeResponses];

export type CharacterControllerFindAllData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/characters';
};

export type CharacterControllerFindAllResponses = {
    /**
     * Successfully get all characters
     */
    200: Array<CharacterDto>;
};

export type CharacterControllerFindAllResponse = CharacterControllerFindAllResponses[keyof CharacterControllerFindAllResponses];

export type CharacterControllerFindImagesData = {
    body?: never;
    path: {
        /**
         * 角色 ID
         */
        id: number;
    };
    query?: never;
    url: '/characters/{id}/images';
};

export type CharacterControllerFindImagesResponses = {
    /**
     * Successfully get images of character
     */
    200: Array<CharacterMoveImageDto>;
};

export type CharacterControllerFindImagesResponse = CharacterControllerFindImagesResponses[keyof CharacterControllerFindImagesResponses];

export type CanvasControllerGetAllStageData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/canvas/stage';
};

export type CanvasControllerGetAllStageResponses = {
    /**
     * Successfully get all stage
     */
    200: Array<CanvasStageDto>;
};

export type CanvasControllerGetAllStageResponse = CanvasControllerGetAllStageResponses[keyof CanvasControllerGetAllStageResponses];

export type CanvasControllerFindAllBlocksData = {
    body?: never;
    path: {
        /**
         * UUID of stage
         */
        stageId: string;
    };
    query?: never;
    url: '/canvas/numpadBlock/get/{stageId}';
};

export type CanvasControllerFindAllBlocksResponses = {
    /**
     * Successfully get all blocks
     */
    200: Array<CanvasNumpadBlockDto>;
};

export type CanvasControllerFindAllBlocksResponse = CanvasControllerFindAllBlocksResponses[keyof CanvasControllerFindAllBlocksResponses];

export type CanvasControllerFindAllCharacterMoveImagesData = {
    body?: never;
    path: {
        /**
         * UUID of stage
         */
        stageId: string;
    };
    query?: never;
    url: '/canvas/characterMoveImage/get/{stageId}';
};

export type CanvasControllerFindAllCharacterMoveImagesResponses = {
    /**
     * Successfully get all characterMoveImages
     */
    200: Array<CanvasCharacterMoveImageDto>;
};

export type CanvasControllerFindAllCharacterMoveImagesResponse = CanvasControllerFindAllCharacterMoveImagesResponses[keyof CanvasControllerFindAllCharacterMoveImagesResponses];

export type CanvasControllerFindAllArrowsData = {
    body?: never;
    path: {
        /**
         * UUID of stage
         */
        stageId: string;
    };
    query?: never;
    url: '/canvas/arrow/get/{stageId}';
};

export type CanvasControllerFindAllArrowsResponses = {
    /**
     * Successfully get all arrows
     */
    200: Array<CanvasArrowDto>;
};

export type CanvasControllerFindAllArrowsResponse = CanvasControllerFindAllArrowsResponses[keyof CanvasControllerFindAllArrowsResponses];

export type CanvasControllerCreateNumpadBlockData = {
    body: CreateCanvasNumpadBlockDto;
    path?: never;
    query?: never;
    url: '/canvas/numpadBlock/create';
};

export type CanvasControllerCreateNumpadBlockErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
};

export type CanvasControllerCreateNumpadBlockResponses = {
    /**
     * Create Numpad Block Successfully
     */
    200: CanvasNumpadBlockDto;
};

export type CanvasControllerCreateNumpadBlockResponse = CanvasControllerCreateNumpadBlockResponses[keyof CanvasControllerCreateNumpadBlockResponses];

export type CanvasControllerCreateCharacterMoveImageData = {
    body: CreateCanvasCharacterMoveImageDto;
    path?: never;
    query?: never;
    url: '/canvas/characterMoveImage/create';
};

export type CanvasControllerCreateCharacterMoveImageErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
};

export type CanvasControllerCreateCharacterMoveImageResponses = {
    /**
     * Create characterMoveImage Successfully
     */
    200: CanvasCharacterMoveImageDto;
};

export type CanvasControllerCreateCharacterMoveImageResponse = CanvasControllerCreateCharacterMoveImageResponses[keyof CanvasControllerCreateCharacterMoveImageResponses];

export type CanvasControllerCreateArrowData = {
    body: CreateCanvasArrowDto;
    path?: never;
    query?: never;
    url: '/canvas/arrow/create';
};

export type CanvasControllerCreateArrowErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
};

export type CanvasControllerCreateArrowResponses = {
    /**
     * Create arrow Successfully
     */
    200: CanvasArrowDto;
};

export type CanvasControllerCreateArrowResponse = CanvasControllerCreateArrowResponses[keyof CanvasControllerCreateArrowResponses];

export type CanvasControllerCreateStageData = {
    body: CreateCanvasStageDto;
    path?: never;
    query?: never;
    url: '/canvas/stage/create';
};

export type CanvasControllerCreateStageErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
};

export type CanvasControllerCreateStageResponses = {
    /**
     * Create Stage Successfully
     */
    200: CanvasStageDto;
};

export type CanvasControllerCreateStageResponse = CanvasControllerCreateStageResponses[keyof CanvasControllerCreateStageResponses];

export type CanvasControllerUpdateStageData = {
    body: UpdateCanvasStageDto;
    path?: never;
    query?: never;
    url: '/canvas/stage/update';
};

export type CanvasControllerUpdateStageErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
};

export type CanvasControllerUpdateStageResponses = {
    /**
     * Update Stage Successfully
     */
    200: CanvasStageDto;
};

export type CanvasControllerUpdateStageResponse = CanvasControllerUpdateStageResponses[keyof CanvasControllerUpdateStageResponses];

export type CanvasControllerUpdateNumpadBlockData = {
    body: UpdateCanvasNumpadBlockDto;
    path?: never;
    query?: never;
    url: '/canvas/numpadBlock/update';
};

export type CanvasControllerUpdateNumpadBlockErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
};

export type CanvasControllerUpdateNumpadBlockResponses = {
    /**
     * Update numpadBlock Successfully
     */
    200: CanvasNumpadBlockDto;
};

export type CanvasControllerUpdateNumpadBlockResponse = CanvasControllerUpdateNumpadBlockResponses[keyof CanvasControllerUpdateNumpadBlockResponses];

export type CanvasControllerUpdateCharacterMoveImageData = {
    body: UpdateCanvasCharacterMoveImageDto;
    path?: never;
    query?: never;
    url: '/canvas/characterMoveImage/update';
};

export type CanvasControllerUpdateCharacterMoveImageErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
};

export type CanvasControllerUpdateCharacterMoveImageResponses = {
    /**
     * Update characterMoveImage Successfully
     */
    200: CanvasCharacterMoveImageDto;
};

export type CanvasControllerUpdateCharacterMoveImageResponse = CanvasControllerUpdateCharacterMoveImageResponses[keyof CanvasControllerUpdateCharacterMoveImageResponses];

export type CanvasControllerUpdateArrowData = {
    body: UpdateCanvasArrowDto;
    path?: never;
    query?: never;
    url: '/canvas/arrow/update';
};

export type CanvasControllerUpdateArrowErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
};

export type CanvasControllerUpdateArrowResponses = {
    /**
     * Update arrow Successfully
     */
    200: CanvasArrowDto;
};

export type CanvasControllerUpdateArrowResponse = CanvasControllerUpdateArrowResponses[keyof CanvasControllerUpdateArrowResponses];

export type CanvasControllerDeleteStageData = {
    body?: never;
    path: {
        /**
         * UUID of stage
         */
        stageId: string;
    };
    query?: never;
    url: '/canvas/stage/delete/{stageId}';
};

export type CanvasControllerDeleteStageErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
};

export type CanvasControllerDeleteStageResponses = {
    /**
     * Successfully delete stage
     */
    200: boolean;
};

export type CanvasControllerDeleteStageResponse = CanvasControllerDeleteStageResponses[keyof CanvasControllerDeleteStageResponses];

export type CanvasControllerDeleteBlockData = {
    body?: never;
    path: {
        /**
         * UUID of block
         */
        blockId: string;
    };
    query?: never;
    url: '/canvas/numpadBlock/delete/{blockId}';
};

export type CanvasControllerDeleteBlockErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
};

export type CanvasControllerDeleteBlockResponses = {
    /**
     * Successfully delete block
     */
    200: boolean;
};

export type CanvasControllerDeleteBlockResponse = CanvasControllerDeleteBlockResponses[keyof CanvasControllerDeleteBlockResponses];

export type CanvasControllerDeleteCharacterMoveImageData = {
    body?: never;
    path: {
        canvasCharacterMoveImageID: string;
    };
    query?: never;
    url: '/canvas/characterMoveImage/delete/{canvasCharacterMoveImageID}';
};

export type CanvasControllerDeleteCharacterMoveImageErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
};

export type CanvasControllerDeleteCharacterMoveImageResponses = {
    /**
     * Successfully delete CanvasCharacterMoveImage
     */
    200: boolean;
};

export type CanvasControllerDeleteCharacterMoveImageResponse = CanvasControllerDeleteCharacterMoveImageResponses[keyof CanvasControllerDeleteCharacterMoveImageResponses];

export type CanvasControllerDeleteArrowData = {
    body?: never;
    path: {
        /**
         * UUID of arrow
         */
        arrowId: string;
    };
    query?: never;
    url: '/canvas/arrow/delete/{arrowId}';
};

export type CanvasControllerDeleteArrowErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
};

export type CanvasControllerDeleteArrowResponses = {
    /**
     * Successfully delete arrow
     */
    200: boolean;
};

export type CanvasControllerDeleteArrowResponse = CanvasControllerDeleteArrowResponses[keyof CanvasControllerDeleteArrowResponses];

export type ClientOptions = {
    baseUrl: 'https://localhost:3000' | (string & {});
};
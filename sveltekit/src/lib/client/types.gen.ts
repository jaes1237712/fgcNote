// This file is auto-generated by @hey-api/openapi-ts

export type GoogleLoginBody = {
    id_token: string;
};

export type UserDto = {
    /**
     * User ID
     */
    id: string;
    /**
     * User Email
     */
    email: string;
    /**
     * User Nickname(Default Google Name)
     */
    nickname: string;
    /**
     * User Google Picture
     */
    picture: string | null;
};

export type CharacterDto = {
    /**
     * Primary ID
     */
    id: number;
    /**
     * Character Name
     */
    name: string;
    /**
     * Icon Path
     */
    iconFilePath: string;
    /**
     * Portrait Path
     */
    portraitFilePath: string;
};

export type CharacterMoveImageDto = {
    /**
     * File name of the image
     */
    fileName: string;
    /**
     * File path of the image
     */
    filePath: string;
    /**
     * ID of the associated character
     */
    characterId: number;
    /**
     * Width of the image in pixels
     */
    width: number;
    /**
     * Height of the image in pixels
     */
    height: number;
};

export type CanvasStageDto = {
    /**
     * UUIDv4, generate by client
     */
    id: string;
    /**
     * UUIDv4, generate by client
     */
    characterMe: CharacterDto;
    /**
     * UUIDv4, generate by client
     */
    characterOpponent: CharacterDto;
    /**
     * Stage Name
     */
    name: string;
    /**
     * who create this stage
     */
    user: UserDto;
};

export type CanvasNumpadBlockDto = {
    /**
     * For frontend to distinguish node kind
     */
    kind: 'NUMPAD_BLOCK';
    /**
     * UUIDv4, generate by client
     */
    id: string;
    /**
     * Numpad Input, like 623p
     */
    input: string;
    /**
     * CONTROLLER_TYPE, modern or classic
     */
    type: 'CLASSIC' | 'MODERN';
    /**
     * x, unit: viewportWidthUnit
     */
    x: number;
    /**
     * y, unit: viewportHeightUnit
     */
    y: number;
};

export type CanvasCharacterMoveImageDto = {
    /**
     * For frontend to distinguish node kind
     */
    kind: 'CHARACTER_MOVE_IMAGE';
    /**
     * UUIDv4, generate by client
     */
    id: string;
    /**
     * x, unit: viewportWidthUnit
     */
    x: number;
    /**
     * y, unit: viewportHeightUnit
     */
    y: number;
    rotation: number;
    scaleX: number;
    scaleY: number;
    characterMoveImage: CharacterMoveImageDto;
};

export type CanvasArrowDto = {
    /**
     * For frontend to distinguish node kind
     */
    kind: 'ARROW';
    /**
     * UUIDv4, generate by client
     */
    id: string;
    /**
     * Konva arrow anchors
     */
    anchorNodesId: Array<string>;
};

export type CanvasTextDto = {
    /**
     * For frontend to distinguish node kind
     */
    kind: 'TEXT';
    /**
     * UUIDv4, generate by client
     */
    id: string;
    /**
     * Text content
     */
    text: string;
    /**
     * Font color
     */
    fontColor: string;
    /**
     * Background color
     */
    backgroundColor: string;
    /**
     * x, unit: viewportWidthUnit
     */
    x: number;
    /**
     * y, unit: viewportHeightUnit
     */
    y: number;
    /**
     * rotation, unit: degree
     */
    rotation: number;
    /**
     * fontSize
     */
    fontSize: number;
    /**
     * Stage ID
     */
    stageId?: string;
};

export type CanvasVideoDto = {
    /**
     * For frontend to distinguish node kind
     */
    kind: 'VIDEO';
    /**
     * UUIDv4, generate by client
     */
    id: string;
    /**
     * Video type
     */
    type: 'YOUTUBE';
    /**
     * Video source URL
     */
    src: string;
    /**
     * Show up title on canvas
     */
    title: string | null;
    /**
     * x, unit: viewportWidthUnit
     */
    x: number;
    /**
     * y, unit: viewportHeightUnit
     */
    y: number;
    /**
     * rotation, unit: degree
     */
    rotation: number;
    /**
     * scaleX
     */
    scaleX: number;
    /**
     * scaleY
     */
    scaleY: number;
    /**
     * Stage ID
     */
    stageId?: string;
};

export type CreateCanvasNumpadBlockDto = {
    /**
     * UUIDv4, generate by client
     */
    id: string;
    /**
     * Numpad Input, like 623p
     */
    input: string;
    /**
     * CONTROLLER_TYPE, modern or classic
     */
    type: 'CLASSIC' | 'MODERN';
    /**
     * x, unit: viewportWidthUnit
     */
    x: number;
    /**
     * y, unit: viewportHeightUnit
     */
    y: number;
    /**
     * belong to which stage
     */
    stageId: string;
};

export type CreateCanvasCharacterMoveImageDto = {
    /**
     * UUIDv4, generate by client
     */
    id: string;
    /**
     * x, unit: viewportWidthUnit
     */
    x: number;
    /**
     * y, unit: viewportHeightUnit
     */
    y: number;
    rotation: number;
    scaleX: number;
    scaleY: number;
    characterMoveImage: CharacterMoveImageDto;
    /**
     * belong to which stage
     */
    stageId: string;
};

export type CreateCanvasArrowDto = {
    /**
     * UUIDv4, generate by client
     */
    id: string;
    /**
     * Konva arrow anchors
     */
    anchorNodesId: Array<string>;
    /**
     * belong to which stage
     */
    stageId: string;
};

export type CreateCanvasTextDto = {
    /**
     * UUIDv4, generate by client
     */
    id: string;
    /**
     * Text content
     */
    text: string;
    /**
     * Font color
     */
    fontColor: string;
    /**
     * Background color
     */
    backgroundColor: string;
    /**
     * x, unit: viewportWidthUnit
     */
    x: number;
    /**
     * y, unit: viewportHeightUnit
     */
    y: number;
    /**
     * rotation, unit: degree
     */
    rotation: number;
    /**
     * fontSize
     */
    fontSize: number;
    /**
     * Stage ID
     */
    stageId: string;
};

export type CreateCanvasVideoDto = {
    /**
     * UUIDv4, generate by client
     */
    id: string;
    /**
     * Video type
     */
    type: 'YOUTUBE';
    /**
     * Video source URL
     */
    src: string;
    /**
     * Show up title on canvas
     */
    title: string | null;
    /**
     * x, unit: viewportWidthUnit
     */
    x: number;
    /**
     * y, unit: viewportHeightUnit
     */
    y: number;
    /**
     * rotation, unit: degree
     */
    rotation: number;
    /**
     * scaleX
     */
    scaleX: number;
    /**
     * scaleY
     */
    scaleY: number;
    /**
     * Stage ID
     */
    stageId: string;
};

export type CreateCanvasStageDto = {
    id: string;
    characterMe: CharacterDto;
    characterOpponent: CharacterDto;
    name: string;
};

export type UpdateCanvasStageDto = {
    id: string;
    /**
     * The updated name of the stage
     */
    name: string;
};

export type UpdateCanvasNumpadBlockDto = {
    /**
     * UUIDv4, generate by client
     */
    id: string;
    /**
     * Numpad Input, like 623p
     */
    input: string;
    /**
     * CONTROLLER_TYPE, modern or classic
     */
    type: 'CLASSIC' | 'MODERN';
    /**
     * x, unit: viewportWidthUnit
     */
    x: number;
    /**
     * y, unit: viewportHeightUnit
     */
    y: number;
};

export type UpdateCanvasCharacterMoveImageDto = {
    /**
     * UUIDv4, generate by client
     */
    id: string;
    /**
     * x, unit: viewportWidthUnit
     */
    x: number;
    /**
     * y, unit: viewportHeightUnit
     */
    y: number;
    rotation: number;
    scaleX: number;
    scaleY: number;
    characterMoveImage: CharacterMoveImageDto;
};

export type UpdateCanvasArrowDto = {
    /**
     * UUIDv4, generate by client
     */
    id: string;
    /**
     * Konva arrow anchors
     */
    anchorNodesId: Array<string>;
    /**
     * belong to which stage
     */
    stageId: string;
};

export type UpdateCanvasTextDto = {
    /**
     * UUIDv4, generate by client
     */
    id: string;
    /**
     * Text content
     */
    text: string;
    /**
     * Font color
     */
    fontColor: string;
    /**
     * Background color
     */
    backgroundColor: string;
    /**
     * x, unit: viewportWidthUnit
     */
    x: number;
    /**
     * y, unit: viewportHeightUnit
     */
    y: number;
    /**
     * rotation, unit: degree
     */
    rotation: number;
    /**
     * fontSize
     */
    fontSize: number;
};

export type UpdateCanvasVideoDto = {
    /**
     * UUIDv4, generate by client
     */
    id: string;
    /**
     * Video type
     */
    type: 'YOUTUBE';
    /**
     * Video source URL
     */
    src: string;
    /**
     * Show up title on canvas
     */
    title: string | null;
    /**
     * x, unit: viewportWidthUnit
     */
    x: number;
    /**
     * y, unit: viewportHeightUnit
     */
    y: number;
    /**
     * rotation, unit: degree
     */
    rotation: number;
    /**
     * scaleX
     */
    scaleX: number;
    /**
     * scaleY
     */
    scaleY: number;
};

export type DeleteSummary = {
    /**
     * Indicates if the operation was successful
     */
    ok: boolean;
    /**
     * List of IDs deleted by the operation
     */
    deletedEntityIds: Array<string>;
};

export type SyncCanvasNumpadBlocksDto = {
    stageId: string;
    blocks: Array<CreateCanvasNumpadBlockDto>;
};

export type SyncCanvasCharacterMoveImagesDto = {
    stageId: string;
    characterMoveImages: Array<CreateCanvasCharacterMoveImageDto>;
};

export type SyncCanvasArrowsDto = {
    stageId: string;
    arrows: Array<CreateCanvasArrowDto>;
};

export type SyncCanvasTextDto = {
    /**
     * Stage ID
     */
    stageId: string;
    /**
     * Array of text objects to sync
     */
    texts: Array<CreateCanvasTextDto>;
};

export type SyncCanvasVideoDto = {
    /**
     * Stage ID
     */
    stageId: string;
    /**
     * Array of video objects to sync
     */
    videos: Array<CreateCanvasVideoDto>;
};

export type AuthControllerGoogleLoginData = {
    body: GoogleLoginBody;
    path?: never;
    query?: never;
    url: '/auth/google-login';
};

export type AuthControllerGoogleLoginResponses = {
    /**
     * Login and Create Session successfully
     */
    200: UserDto;
};

export type AuthControllerGoogleLoginResponse = AuthControllerGoogleLoginResponses[keyof AuthControllerGoogleLoginResponses];

export type AuthControllerLogoutData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/logout';
};

export type AuthControllerLogoutResponses = {
    /**
     * Logout successfully
     */
    200: unknown;
};

export type UserControllerGetMeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/user/me';
};

export type UserControllerGetMeResponses = {
    200: UserDto;
};

export type UserControllerGetMeResponse = UserControllerGetMeResponses[keyof UserControllerGetMeResponses];

export type CharacterControllerFindAllData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/characters';
};

export type CharacterControllerFindAllResponses = {
    /**
     * Successfully get all characters
     */
    200: Array<CharacterDto>;
};

export type CharacterControllerFindAllResponse = CharacterControllerFindAllResponses[keyof CharacterControllerFindAllResponses];

export type CharacterControllerFindImagesData = {
    body?: never;
    path: {
        /**
         * 角色 ID
         */
        id: number;
    };
    query?: never;
    url: '/characters/{id}/images';
};

export type CharacterControllerFindImagesResponses = {
    /**
     * Successfully get images of character
     */
    200: Array<CharacterMoveImageDto>;
};

export type CharacterControllerFindImagesResponse = CharacterControllerFindImagesResponses[keyof CharacterControllerFindImagesResponses];

export type CanvasControllerGetAllStageData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/canvas/stage';
};

export type CanvasControllerGetAllStageResponses = {
    /**
     * Successfully get all stage
     */
    200: Array<CanvasStageDto>;
};

export type CanvasControllerGetAllStageResponse = CanvasControllerGetAllStageResponses[keyof CanvasControllerGetAllStageResponses];

export type CanvasControllerFindAllBlocksData = {
    body?: never;
    path: {
        /**
         * UUID of stage
         */
        stageId: string;
    };
    query?: never;
    url: '/canvas/numpadBlock/get/{stageId}';
};

export type CanvasControllerFindAllBlocksResponses = {
    /**
     * Successfully get all blocks
     */
    200: Array<CanvasNumpadBlockDto>;
};

export type CanvasControllerFindAllBlocksResponse = CanvasControllerFindAllBlocksResponses[keyof CanvasControllerFindAllBlocksResponses];

export type CanvasControllerFindAllCharacterMoveImagesData = {
    body?: never;
    path: {
        /**
         * UUID of stage
         */
        stageId: string;
    };
    query?: never;
    url: '/canvas/characterMoveImage/get/{stageId}';
};

export type CanvasControllerFindAllCharacterMoveImagesResponses = {
    /**
     * Successfully get all characterMoveImages
     */
    200: Array<CanvasCharacterMoveImageDto>;
};

export type CanvasControllerFindAllCharacterMoveImagesResponse = CanvasControllerFindAllCharacterMoveImagesResponses[keyof CanvasControllerFindAllCharacterMoveImagesResponses];

export type CanvasControllerFindAllArrowsData = {
    body?: never;
    path: {
        /**
         * UUID of stage
         */
        stageId: string;
    };
    query?: never;
    url: '/canvas/arrow/get/{stageId}';
};

export type CanvasControllerFindAllArrowsResponses = {
    /**
     * Successfully get all arrows
     */
    200: Array<CanvasArrowDto>;
};

export type CanvasControllerFindAllArrowsResponse = CanvasControllerFindAllArrowsResponses[keyof CanvasControllerFindAllArrowsResponses];

export type CanvasControllerFindAllTextsData = {
    body?: never;
    path: {
        /**
         * UUID of stage
         */
        stageId: string;
    };
    query?: never;
    url: '/canvas/text/get/{stageId}';
};

export type CanvasControllerFindAllTextsResponses = {
    /**
     * Successfully get all texts
     */
    200: Array<CanvasTextDto>;
};

export type CanvasControllerFindAllTextsResponse = CanvasControllerFindAllTextsResponses[keyof CanvasControllerFindAllTextsResponses];

export type CanvasControllerFindAllVideosData = {
    body?: never;
    path: {
        /**
         * UUID of stage
         */
        stageId: string;
    };
    query?: never;
    url: '/canvas/video/get/{stageId}';
};

export type CanvasControllerFindAllVideosResponses = {
    /**
     * Successfully get all videos
     */
    200: Array<CanvasVideoDto>;
};

export type CanvasControllerFindAllVideosResponse = CanvasControllerFindAllVideosResponses[keyof CanvasControllerFindAllVideosResponses];

export type CanvasControllerCreateNumpadBlockData = {
    body: CreateCanvasNumpadBlockDto;
    path?: never;
    query?: never;
    url: '/canvas/numpadBlock/create';
};

export type CanvasControllerCreateNumpadBlockErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
};

export type CanvasControllerCreateNumpadBlockResponses = {
    /**
     * Create Numpad Block Successfully
     */
    200: CanvasNumpadBlockDto;
};

export type CanvasControllerCreateNumpadBlockResponse = CanvasControllerCreateNumpadBlockResponses[keyof CanvasControllerCreateNumpadBlockResponses];

export type CanvasControllerCreateNumpadBlocksData = {
    body: Array<CreateCanvasNumpadBlockDto>;
    path?: never;
    query?: never;
    url: '/canvas/numpadBlocks/bulk-create';
};

export type CanvasControllerCreateNumpadBlocksErrors = {
    /**
     * Bad Request (e.g., empty array provided)
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * One or more stages not found
     */
    404: unknown;
};

export type CanvasControllerCreateNumpadBlocksResponses = {
    /**
     * Numpad Blocks created successfully
     */
    200: Array<CanvasNumpadBlockDto>;
};

export type CanvasControllerCreateNumpadBlocksResponse = CanvasControllerCreateNumpadBlocksResponses[keyof CanvasControllerCreateNumpadBlocksResponses];

export type CanvasControllerCreateCharacterMoveImageData = {
    body: CreateCanvasCharacterMoveImageDto;
    path?: never;
    query?: never;
    url: '/canvas/characterMoveImage/create';
};

export type CanvasControllerCreateCharacterMoveImageErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
};

export type CanvasControllerCreateCharacterMoveImageResponses = {
    /**
     * Create characterMoveImage Successfully
     */
    200: CanvasCharacterMoveImageDto;
};

export type CanvasControllerCreateCharacterMoveImageResponse = CanvasControllerCreateCharacterMoveImageResponses[keyof CanvasControllerCreateCharacterMoveImageResponses];

export type CanvasControllerCreateCharacterMoveImagesData = {
    /**
     * An array of characterMoveImages DTO.
     */
    body: Array<CreateCanvasCharacterMoveImageDto>;
    path?: never;
    query?: never;
    url: '/canvas/characterMoveImage/bulk-create';
};

export type CanvasControllerCreateCharacterMoveImagesErrors = {
    /**
     * Bad Request (e.g., empty array provided)
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * One or more stages not found
     */
    404: unknown;
};

export type CanvasControllerCreateCharacterMoveImagesResponses = {
    /**
     * characterMoveImages created successfully
     */
    200: Array<CanvasCharacterMoveImageDto>;
};

export type CanvasControllerCreateCharacterMoveImagesResponse = CanvasControllerCreateCharacterMoveImagesResponses[keyof CanvasControllerCreateCharacterMoveImagesResponses];

export type CanvasControllerCreateArrowData = {
    body: CreateCanvasArrowDto;
    path?: never;
    query?: never;
    url: '/canvas/arrow/create';
};

export type CanvasControllerCreateArrowErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
};

export type CanvasControllerCreateArrowResponses = {
    /**
     * Create arrow Successfully
     */
    200: CanvasArrowDto;
};

export type CanvasControllerCreateArrowResponse = CanvasControllerCreateArrowResponses[keyof CanvasControllerCreateArrowResponses];

export type CanvasControllerCreateArrowsData = {
    /**
     * An array of CreateArrow DTO.
     */
    body: Array<CreateCanvasArrowDto>;
    path?: never;
    query?: never;
    url: '/canvas/arrow/bulk-create';
};

export type CanvasControllerCreateArrowsErrors = {
    /**
     * Bad Request (e.g., empty array provided)
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * One or more stages not found
     */
    404: unknown;
};

export type CanvasControllerCreateArrowsResponses = {
    /**
     * arrows created successfully
     */
    200: Array<CanvasArrowDto>;
};

export type CanvasControllerCreateArrowsResponse = CanvasControllerCreateArrowsResponses[keyof CanvasControllerCreateArrowsResponses];

export type CanvasControllerCreateTextData = {
    body: CreateCanvasTextDto;
    path?: never;
    query?: never;
    url: '/canvas/text/create';
};

export type CanvasControllerCreateTextErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
};

export type CanvasControllerCreateTextResponses = {
    /**
     * Create text Successfully
     */
    200: CanvasTextDto;
};

export type CanvasControllerCreateTextResponse = CanvasControllerCreateTextResponses[keyof CanvasControllerCreateTextResponses];

export type CanvasControllerCreateTextsData = {
    /**
     * An array of CreateText DTO.
     */
    body: Array<CreateCanvasTextDto>;
    path?: never;
    query?: never;
    url: '/canvas/text/bulk-create';
};

export type CanvasControllerCreateTextsErrors = {
    /**
     * Bad Request (e.g., empty array provided)
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * One or more stages not found
     */
    404: unknown;
};

export type CanvasControllerCreateTextsResponses = {
    /**
     * texts created successfully
     */
    200: Array<CanvasTextDto>;
};

export type CanvasControllerCreateTextsResponse = CanvasControllerCreateTextsResponses[keyof CanvasControllerCreateTextsResponses];

export type CanvasControllerCreateVideoData = {
    body: CreateCanvasVideoDto;
    path?: never;
    query?: never;
    url: '/canvas/video/create';
};

export type CanvasControllerCreateVideoErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
};

export type CanvasControllerCreateVideoResponses = {
    /**
     * Create video Successfully
     */
    200: CanvasVideoDto;
};

export type CanvasControllerCreateVideoResponse = CanvasControllerCreateVideoResponses[keyof CanvasControllerCreateVideoResponses];

export type CanvasControllerCreateVideosData = {
    /**
     * An array of CreateVideo DTO.
     */
    body: Array<CreateCanvasVideoDto>;
    path?: never;
    query?: never;
    url: '/canvas/video/bulk-create';
};

export type CanvasControllerCreateVideosErrors = {
    /**
     * Bad Request (e.g., empty array provided)
     */
    400: unknown;
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * One or more stages not found
     */
    404: unknown;
};

export type CanvasControllerCreateVideosResponses = {
    /**
     * videos created successfully
     */
    200: Array<CanvasVideoDto>;
};

export type CanvasControllerCreateVideosResponse = CanvasControllerCreateVideosResponses[keyof CanvasControllerCreateVideosResponses];

export type CanvasControllerCreateStageData = {
    body: CreateCanvasStageDto;
    path?: never;
    query?: never;
    url: '/canvas/stage/create';
};

export type CanvasControllerCreateStageErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
};

export type CanvasControllerCreateStageResponses = {
    /**
     * Create Stage Successfully
     */
    200: CanvasStageDto;
};

export type CanvasControllerCreateStageResponse = CanvasControllerCreateStageResponses[keyof CanvasControllerCreateStageResponses];

export type CanvasControllerUpdateStageData = {
    body: UpdateCanvasStageDto;
    path?: never;
    query?: never;
    url: '/canvas/stage/update';
};

export type CanvasControllerUpdateStageErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
};

export type CanvasControllerUpdateStageResponses = {
    /**
     * Update Stage Successfully
     */
    200: CanvasStageDto;
};

export type CanvasControllerUpdateStageResponse = CanvasControllerUpdateStageResponses[keyof CanvasControllerUpdateStageResponses];

export type CanvasControllerUpdateNumpadBlockData = {
    body: UpdateCanvasNumpadBlockDto;
    path?: never;
    query?: never;
    url: '/canvas/numpadBlock/update';
};

export type CanvasControllerUpdateNumpadBlockErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
};

export type CanvasControllerUpdateNumpadBlockResponses = {
    /**
     * Update numpadBlock Successfully
     */
    200: CanvasNumpadBlockDto;
};

export type CanvasControllerUpdateNumpadBlockResponse = CanvasControllerUpdateNumpadBlockResponses[keyof CanvasControllerUpdateNumpadBlockResponses];

export type CanvasControllerUpdateCharacterMoveImageData = {
    body: UpdateCanvasCharacterMoveImageDto;
    path?: never;
    query?: never;
    url: '/canvas/characterMoveImage/update';
};

export type CanvasControllerUpdateCharacterMoveImageErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
};

export type CanvasControllerUpdateCharacterMoveImageResponses = {
    /**
     * Update characterMoveImage Successfully
     */
    200: CanvasCharacterMoveImageDto;
};

export type CanvasControllerUpdateCharacterMoveImageResponse = CanvasControllerUpdateCharacterMoveImageResponses[keyof CanvasControllerUpdateCharacterMoveImageResponses];

export type CanvasControllerUpdateArrowData = {
    body: UpdateCanvasArrowDto;
    path?: never;
    query?: never;
    url: '/canvas/arrow/update';
};

export type CanvasControllerUpdateArrowErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
};

export type CanvasControllerUpdateArrowResponses = {
    /**
     * Update arrow Successfully
     */
    200: CanvasArrowDto;
};

export type CanvasControllerUpdateArrowResponse = CanvasControllerUpdateArrowResponses[keyof CanvasControllerUpdateArrowResponses];

export type CanvasControllerUpdateTextData = {
    body: UpdateCanvasTextDto;
    path?: never;
    query?: never;
    url: '/canvas/text/update';
};

export type CanvasControllerUpdateTextErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
};

export type CanvasControllerUpdateTextResponses = {
    /**
     * Update text Successfully
     */
    200: CanvasTextDto;
};

export type CanvasControllerUpdateTextResponse = CanvasControllerUpdateTextResponses[keyof CanvasControllerUpdateTextResponses];

export type CanvasControllerUpdateVideoData = {
    body: UpdateCanvasVideoDto;
    path?: never;
    query?: never;
    url: '/canvas/video/update';
};

export type CanvasControllerUpdateVideoErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
};

export type CanvasControllerUpdateVideoResponses = {
    /**
     * Update video Successfully
     */
    200: CanvasVideoDto;
};

export type CanvasControllerUpdateVideoResponse = CanvasControllerUpdateVideoResponses[keyof CanvasControllerUpdateVideoResponses];

export type CanvasControllerDeleteStageData = {
    body?: never;
    path: {
        /**
         * UUID of stage
         */
        stageId: string;
    };
    query?: never;
    url: '/canvas/stage/delete/{stageId}';
};

export type CanvasControllerDeleteStageErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
};

export type CanvasControllerDeleteStageResponses = {
    /**
     * Successfully delete stage
     */
    200: DeleteSummary;
};

export type CanvasControllerDeleteStageResponse = CanvasControllerDeleteStageResponses[keyof CanvasControllerDeleteStageResponses];

export type CanvasControllerDeleteNumpadBlockData = {
    body?: never;
    path: {
        /**
         * UUID of block
         */
        blockId: string;
    };
    query?: never;
    url: '/canvas/numpadBlock/delete/{blockId}';
};

export type CanvasControllerDeleteNumpadBlockErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
};

export type CanvasControllerDeleteNumpadBlockResponses = {
    /**
     * Successfully delete block
     */
    200: DeleteSummary;
};

export type CanvasControllerDeleteNumpadBlockResponse = CanvasControllerDeleteNumpadBlockResponses[keyof CanvasControllerDeleteNumpadBlockResponses];

export type CanvasControllerDeleteNumpadBlocksByStageIdData = {
    body?: never;
    path: {
        /**
         * UUID of stage
         */
        stageId: string;
    };
    query?: never;
    url: '/canvas/numpadBlock/delete/{stageId}';
};

export type CanvasControllerDeleteNumpadBlocksByStageIdErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
};

export type CanvasControllerDeleteNumpadBlocksByStageIdResponses = {
    /**
     * Successfully delete NumpadBlocks by stageId
     */
    200: DeleteSummary;
};

export type CanvasControllerDeleteNumpadBlocksByStageIdResponse = CanvasControllerDeleteNumpadBlocksByStageIdResponses[keyof CanvasControllerDeleteNumpadBlocksByStageIdResponses];

export type CanvasControllerDeleteCharacterMoveImageData = {
    body?: never;
    path: {
        canvasCharacterMoveImageID: string;
    };
    query?: never;
    url: '/canvas/characterMoveImage/delete/{canvasCharacterMoveImageID}';
};

export type CanvasControllerDeleteCharacterMoveImageErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
};

export type CanvasControllerDeleteCharacterMoveImageResponses = {
    /**
     * Successfully delete CanvasCharacterMoveImage
     */
    200: DeleteSummary;
};

export type CanvasControllerDeleteCharacterMoveImageResponse = CanvasControllerDeleteCharacterMoveImageResponses[keyof CanvasControllerDeleteCharacterMoveImageResponses];

export type CanvasControllerDeleteCharacterMoveImagesByStageIdData = {
    body?: never;
    path: {
        /**
         * UUID of stage
         */
        stageId: string;
    };
    query?: never;
    url: '/canvas/characterMoveImage/delete/{stageId}';
};

export type CanvasControllerDeleteCharacterMoveImagesByStageIdErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
};

export type CanvasControllerDeleteCharacterMoveImagesByStageIdResponses = {
    /**
     * Successfully delete characterMoveImage
     */
    200: DeleteSummary;
};

export type CanvasControllerDeleteCharacterMoveImagesByStageIdResponse = CanvasControllerDeleteCharacterMoveImagesByStageIdResponses[keyof CanvasControllerDeleteCharacterMoveImagesByStageIdResponses];

export type CanvasControllerDeleteArrowData = {
    body?: never;
    path: {
        /**
         * UUID of arrow
         */
        arrowId: string;
    };
    query?: never;
    url: '/canvas/arrow/delete/{arrowId}';
};

export type CanvasControllerDeleteArrowErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
};

export type CanvasControllerDeleteArrowResponses = {
    /**
     * Successfully delete arrow
     */
    200: DeleteSummary;
};

export type CanvasControllerDeleteArrowResponse = CanvasControllerDeleteArrowResponses[keyof CanvasControllerDeleteArrowResponses];

export type CanvasControllerDeleteArrowByStageIdData = {
    body?: never;
    path: {
        /**
         * UUID of stage
         */
        stageId: string;
    };
    query?: never;
    url: '/canvas/arrow/delete/{stageId}';
};

export type CanvasControllerDeleteArrowByStageIdErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
};

export type CanvasControllerDeleteArrowByStageIdResponses = {
    /**
     * Successfully delete arrows
     */
    200: DeleteSummary;
};

export type CanvasControllerDeleteArrowByStageIdResponse = CanvasControllerDeleteArrowByStageIdResponses[keyof CanvasControllerDeleteArrowByStageIdResponses];

export type CanvasControllerDeleteTextData = {
    body?: never;
    path: {
        /**
         * UUID of text
         */
        textId: string;
    };
    query?: never;
    url: '/canvas/text/delete/{textId}';
};

export type CanvasControllerDeleteTextErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
};

export type CanvasControllerDeleteTextResponses = {
    /**
     * Successfully delete text
     */
    200: DeleteSummary;
};

export type CanvasControllerDeleteTextResponse = CanvasControllerDeleteTextResponses[keyof CanvasControllerDeleteTextResponses];

export type CanvasControllerDeleteTextsByStageIdData = {
    body?: never;
    path: {
        /**
         * UUID of stage
         */
        stageId: string;
    };
    query?: never;
    url: '/canvas/text/delete/{stageId}';
};

export type CanvasControllerDeleteTextsByStageIdErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
};

export type CanvasControllerDeleteTextsByStageIdResponses = {
    /**
     * Successfully delete texts
     */
    200: DeleteSummary;
};

export type CanvasControllerDeleteTextsByStageIdResponse = CanvasControllerDeleteTextsByStageIdResponses[keyof CanvasControllerDeleteTextsByStageIdResponses];

export type CanvasControllerDeleteVideoData = {
    body?: never;
    path: {
        /**
         * UUID of video
         */
        videoId: string;
    };
    query?: never;
    url: '/canvas/video/delete/{videoId}';
};

export type CanvasControllerDeleteVideoErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
};

export type CanvasControllerDeleteVideoResponses = {
    /**
     * Successfully delete video
     */
    200: DeleteSummary;
};

export type CanvasControllerDeleteVideoResponse = CanvasControllerDeleteVideoResponses[keyof CanvasControllerDeleteVideoResponses];

export type CanvasControllerDeleteVideosByStageIdData = {
    body?: never;
    path: {
        /**
         * UUID of stage
         */
        stageId: string;
    };
    query?: never;
    url: '/canvas/video/delete/{stageId}';
};

export type CanvasControllerDeleteVideosByStageIdErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
};

export type CanvasControllerDeleteVideosByStageIdResponses = {
    /**
     * Successfully delete videos
     */
    200: DeleteSummary;
};

export type CanvasControllerDeleteVideosByStageIdResponse = CanvasControllerDeleteVideosByStageIdResponses[keyof CanvasControllerDeleteVideosByStageIdResponses];

export type CanvasControllerSyncNumpadBlocksData = {
    body: SyncCanvasNumpadBlocksDto;
    path?: never;
    query?: never;
    url: '/canvas/numpadBlock/sync';
};

export type CanvasControllerSyncNumpadBlocksErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Stage not found
     */
    404: unknown;
};

export type CanvasControllerSyncNumpadBlocksResponses = {
    /**
     * Numpad Blocks sync successfully
     */
    200: Array<CanvasNumpadBlockDto>;
};

export type CanvasControllerSyncNumpadBlocksResponse = CanvasControllerSyncNumpadBlocksResponses[keyof CanvasControllerSyncNumpadBlocksResponses];

export type CanvasControllerSyncCharacterMoveImagesData = {
    body: SyncCanvasCharacterMoveImagesDto;
    path?: never;
    query?: never;
    url: '/canvas/characterMoveImage/sync';
};

export type CanvasControllerSyncCharacterMoveImagesErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Stage not found
     */
    404: unknown;
};

export type CanvasControllerSyncCharacterMoveImagesResponses = {
    /**
     * Character Move Images sync successfully
     */
    200: Array<CanvasCharacterMoveImageDto>;
};

export type CanvasControllerSyncCharacterMoveImagesResponse = CanvasControllerSyncCharacterMoveImagesResponses[keyof CanvasControllerSyncCharacterMoveImagesResponses];

export type CanvasControllerSyncArrowsData = {
    body: SyncCanvasArrowsDto;
    path?: never;
    query?: never;
    url: '/canvas/arrow/sync';
};

export type CanvasControllerSyncArrowsErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Stage not found
     */
    404: unknown;
};

export type CanvasControllerSyncArrowsResponses = {
    /**
     * Arrows sync successfully
     */
    200: Array<CanvasArrowDto>;
};

export type CanvasControllerSyncArrowsResponse = CanvasControllerSyncArrowsResponses[keyof CanvasControllerSyncArrowsResponses];

export type CanvasControllerSyncTextsData = {
    body: SyncCanvasTextDto;
    path?: never;
    query?: never;
    url: '/canvas/text/sync';
};

export type CanvasControllerSyncTextsErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Stage not found
     */
    404: unknown;
};

export type CanvasControllerSyncTextsResponses = {
    /**
     * Texts sync successfully
     */
    200: Array<CanvasTextDto>;
};

export type CanvasControllerSyncTextsResponse = CanvasControllerSyncTextsResponses[keyof CanvasControllerSyncTextsResponses];

export type CanvasControllerSyncVideosData = {
    body: SyncCanvasVideoDto;
    path?: never;
    query?: never;
    url: '/canvas/video/sync';
};

export type CanvasControllerSyncVideosErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Stage not found
     */
    404: unknown;
};

export type CanvasControllerSyncVideosResponses = {
    /**
     * Videos sync successfully
     */
    200: Array<CanvasVideoDto>;
};

export type CanvasControllerSyncVideosResponse = CanvasControllerSyncVideosResponses[keyof CanvasControllerSyncVideosResponses];

export type ClientOptions = {
    baseUrl: 'https://localhost:3000' | (string & {});
};